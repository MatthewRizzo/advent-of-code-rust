//! Represents the encoding scheme for each item
use std::str::FromStr;

use advent_common::errors::{AdventErrors, AdventResult};

#[allow(non_camel_case_types)]
#[derive(Copy, Clone, PartialEq)]
pub(crate) enum ItemPriority {
    None = 0,
    LOWER_A = 1,
    LOWER_B = 2,
    LOWER_C = 3,
    LOWER_D = 4,
    LOWER_E = 5,
    LOWER_F = 6,
    LOWER_G = 7,
    LOWER_H = 8,
    LOWER_I = 9,
    LOWER_J = 10,
    LOWER_K = 11,
    LOWER_L = 12,
    LOWER_M = 13,
    LOWER_N = 14,
    LOWER_O = 15,
    LOWER_P = 16,
    LOWER_Q = 17,
    LOWER_R = 18,
    LOWER_S = 19,
    LOWER_T = 20,
    LOWER_U = 21,
    LOWER_V = 22,
    LOWER_W = 23,
    LOWER_X = 24,
    LOWER_Y = 25,
    LOWER_Z = 26,
    A = 27,
    B = 28,
    C = 29,
    D = 30,
    E = 31,
    F = 32,
    G = 33,
    H = 34,
    I = 35,
    J = 36,
    K = 37,
    L = 38,
    M = 39,
    N = 40,
    O = 41,
    P = 42,
    Q = 43,
    R = 44,
    S = 45,
    T = 46,
    U = 47,
    V = 48,
    W = 49,
    X = 50,
    Y = 51,
    Z = 52,
}

impl FromStr for ItemPriority {
    type Err = AdventErrors;
    fn from_str(input: &str) -> AdventResult<ItemPriority> {
        match input {
            "" => Ok(ItemPriority::None),
            "a" => Ok(ItemPriority::LOWER_A),
            "b" => Ok(ItemPriority::LOWER_B),
            "c" => Ok(ItemPriority::LOWER_C),
            "d" => Ok(ItemPriority::LOWER_D),
            "e" => Ok(ItemPriority::LOWER_E),
            "f" => Ok(ItemPriority::LOWER_F),
            "g" => Ok(ItemPriority::LOWER_G),
            "h" => Ok(ItemPriority::LOWER_H),
            "i" => Ok(ItemPriority::LOWER_I),
            "j" => Ok(ItemPriority::LOWER_J),
            "k" => Ok(ItemPriority::LOWER_K),
            "l" => Ok(ItemPriority::LOWER_L),
            "m" => Ok(ItemPriority::LOWER_M),
            "n" => Ok(ItemPriority::LOWER_N),
            "o" => Ok(ItemPriority::LOWER_O),
            "p" => Ok(ItemPriority::LOWER_P),
            "q" => Ok(ItemPriority::LOWER_Q),
            "r" => Ok(ItemPriority::LOWER_R),
            "s" => Ok(ItemPriority::LOWER_S),
            "t" => Ok(ItemPriority::LOWER_T),
            "u" => Ok(ItemPriority::LOWER_U),
            "v" => Ok(ItemPriority::LOWER_V),
            "w" => Ok(ItemPriority::LOWER_W),
            "x" => Ok(ItemPriority::LOWER_X),
            "y" => Ok(ItemPriority::LOWER_Y),
            "z" => Ok(ItemPriority::LOWER_Z),
            "A" => Ok(ItemPriority::A),
            "B" => Ok(ItemPriority::B),
            "C" => Ok(ItemPriority::C),
            "D" => Ok(ItemPriority::D),
            "E" => Ok(ItemPriority::E),
            "F" => Ok(ItemPriority::F),
            "G" => Ok(ItemPriority::G),
            "H" => Ok(ItemPriority::H),
            "I" => Ok(ItemPriority::I),
            "J" => Ok(ItemPriority::J),
            "K" => Ok(ItemPriority::K),
            "L" => Ok(ItemPriority::L),
            "M" => Ok(ItemPriority::M),
            "N" => Ok(ItemPriority::N),
            "O" => Ok(ItemPriority::O),
            "P" => Ok(ItemPriority::P),
            "Q" => Ok(ItemPriority::Q),
            "R" => Ok(ItemPriority::R),
            "S" => Ok(ItemPriority::S),
            "T" => Ok(ItemPriority::T),
            "U" => Ok(ItemPriority::U),
            "V" => Ok(ItemPriority::V),
            "W" => Ok(ItemPriority::W),
            "X" => Ok(ItemPriority::X),
            "Y" => Ok(ItemPriority::Y),
            "Z" => Ok(ItemPriority::Z),
            _ => Err(AdventErrors::AdventError(
                "Could not map opponent input -> ItemPriority".to_string(),
            )),
        }
    }
}
